/*==============================================================================

   フェード処理 [Fade.cpp]
														 Author : 学校配布、渡邉 修
														 Date   : ***
--------------------------------------------------------------------------------

==============================================================================*/
#include "Fade.h"
#include "Texture.h"
#include "Sprite.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define	FADE_RATE					(0.02f)			// フェード係数


//=============================================================================
// コンストラクタ / デストラクタ
//=============================================================================
Fade::Fade()
{
}

Fade::~Fade()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT Fade::Init()
{
	if(this == nullptr)return E_POINTER;

	//テクスチャ生成
	m_TextureNo = LoadTexture((char*)"data/TEXTURE/fade_white.png");

	//初期化
	m_FadeState = FADE_NONE;
	m_Color = D3DXCOLOR(0.0, 0.0, 0.0, 1.0);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void Fade::Uninit()
{

}

//=============================================================================
// 更新処理
//=============================================================================
void Fade::Update()
{
	// フェード処理中
	if (m_FadeState != FADE_NONE)
	{
		if (m_FadeState == FADE_OUT)
		{// フェードアウト処理
			m_Color.a += FADE_RATE;		// α値を加算して画面を消していく

			if (m_Color.a >= 1.0f)
			{
				// フェードイン処理に切り替え
				m_Color.a = 1.0f;
				//フェードアウト完了フラグ
				m_FadeState = FADE_OUT_COMP;
			}
		}
		else if (m_FadeState == FADE_IN)
		{// フェードイン処理
			m_Color.a -= FADE_RATE;		// α値を減算して画面を浮き上がらせる
			if (m_Color.a <= 0.0f)
			{
				// フェード処理終了
				m_Color.a = 0.0f;
				m_FadeState = FADE_NONE;
			}

		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void Fade::Draw()
{
	// フェード処理をしていないのなら描画しない
	if (m_FadeState == FADE_NONE)
		return;	

	// １枚のポリゴンの頂点とテクスチャ座標を設定
	DrawSpriteColor(m_TextureNo, SCREEN_WIDTH/2, SCREEN_HEIGHT/2, SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f, 0.0f, 1.0f, 1.0f, m_Color);
}

/*------------------------------------------------------------------------------
   フェードアウト・フェードイン処理をしながらシーン遷移する関数
------------------------------------------------------------------------------*/
void Fade::FadeOut()
{
	m_FadeState = FADE_OUT;
}

/*------------------------------------------------------------------------------
   フェードイン処理をしながらシーンを開始する関数
------------------------------------------------------------------------------*/
void Fade::FadeIn()
{
	m_FadeState = FADE_IN;
}

/*------------------------------------------------------------------------------
   フェード処理の状況を返す関数
------------------------------------------------------------------------------*/
FADE_STATE Fade::GetFadeState() const
{
	return m_FadeState;
}

/*------------------------------------------------------------------------------
   フェードカラー設定する関数
------------------------------------------------------------------------------*/
void Fade::SetFadeColor(float r, float g, float b)
{
	m_Color = D3DXCOLOR(r, g, b, 1.0f);
}
